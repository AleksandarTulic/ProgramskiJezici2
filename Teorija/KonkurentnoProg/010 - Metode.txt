public class test extends Thread{
    public static void main(String []args){
        generic a = new generic();
        a.start();

        //postavljanje imena niti
        a.setName("Nit1");

        generic b = new generic();
        b.start();

        b.setName("Nit2");

        generic c = new generic();
        c.start();

        c.setName("Nit3");

        System.out.println("Naziv i Id 1 thread-a je: " + a.getName() + " " + a.getId());
        System.out.println("Naziv i Id 2 thread-a je: " + b.getName() + " " + b.getId());
        System.out.println("Naziv i Id 3 thread-a je: " + c.getName() + " " + c.getId());
    }
}

===========================================================================================================

public class something{
    public static void main(String []args){
        test a = new test();
        a.start();
        try{
            a.interrupt();
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}

class test extends Thread{
    public void run(){
        try{
            Thread.sleep(1000);
            System.out.println("Doing something!!!");
        } catch (Exception e) {
            throw new RuntimeException();
        }
    }
}

===========================================================================================================

public class something{
    public static void main(String []args){
        test a = new test();

        //ovde proces jos nije ziv jer nismo .start()
        System.out.println("Da li je proces jos ziv: " + a.isAlive());

        //stanje ovde je NEW jer jos nije pokrenuto
        System.out.println(a.getState());

        //dok sada smo pokrenuli nit tj pocinje run
        a.start();

        try{
            //RUNNABLE
            System.out.println(a.getState());
        }catch (Exception e){
            e.printStackTrace();
        }

        //ovde je jos ziv ali kad se zavrsi ovaj main i on se gasi
        System.out.println("Da li je proces jos ziv: " + a.isAlive());
    }
}

class test extends Thread{
    public void run(){
        try{
            Thread.sleep(1000);
            System.out.println("Doing something!!!");
        } catch (Exception e) {
            System.out.println("Uradili ste interrupt!!!\n" + e);
        }
    }
}


===========================================================================================================


public class something{
    public static void main(String []args){
        test a = new test();
        test b = new test();

        //kada bi bilo samo a i b ovo start onda redoslijed nije unaprijed nama poznat
        a.start();
        b.start();

        a.yield();
        //Thread-0 uradio je tri ispisa ali je zaustavljen na tome
        //sada radi Thread-1 i ispisuje svih 10 prolaza
        //i onda red opet dolazi na Thread-0
        for (int i=0;i<4;i++){
            if ( i == 2 ){
                a.yield();
            }
        }
    }
}

class test extends Thread{
    public void run(){
        try {
            for (int i = 0; i < 10; i++) {
                System.out.println("Method in control: " + Thread.currentThread().getName());
            }

            System.out.println("Zavrsili smo 10 prolaza :)");
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
