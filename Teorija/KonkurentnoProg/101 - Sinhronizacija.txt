SINHRONIZACIJA
	- NITI IZMEDJU SEBE KOMUNICIRAJU PREKO ZAJEDNICKOG RESURSA TJ OBJEKTA
	- PRI CEMU SAMO JEDNA NIT MOZE DA U DATOM TRENUTKU PRISTUPI KRUTICNOM REGIONU
	- DA BI SE OVO OSTVARILO MI KORISTIMO NPR COUNTER
	- INTERFERENCIJA - KADA DVIJE NITI PRISTUPAJU ZAJEDNICKIM PODACIMA PRI IZVRSAVANJU OPERACIJA
		- PROBLEM:
			- THREAD-0 UZIMA VRIJEDNOST COUNTER, DOLE DEFINISANE FUNKCIJE
			- THREAD-1 RADI ISTU OPERACIJU
			- THREAD-0 VRSI INC()
			- THREAD-1 VRSI DEC()
			- THREAD-0 VRIJEDNOST JE SADA COUNTER=1
			- THREAD-1 VRIJEDNOST JE SADA COUNTER=-1
		- STO ZNACI GUBI SE VRIJEDNOST JER ZA A, COUNTER JE SADA -1
		- RJESENJE PROBLEMA JE HAPPENS-BEFORE VEZA
	- SINHRONIZACIJA KONTRUKTORA NIJE MOGUCA

class Counter{
	private int counter = 0;

	public synchronized void inc(){
		counter++;
	}

	public synchronized void dec(){
		counter--;
	}

	public synchronized int value(){
		return counter;
	}
}

MONITOR
	- OMOGUCAVA IMPLEMENTACIJU SINHRONIZACIJE
	- MOZE BITI U POSJEDU SAMO JEDNE NITI
	- KADA NIT IZADJE IZ KRITICNOG REGIONA MONITOR JE SLOBODAN
	- NE POSTOJI PRAVILO PO KOM CE REDOSLIJEDU NITI DOCI U KRITICNI REGION
	- SINHRONIZACIJA SE IZVODI NA DVA NACINA:
		- SINHRONIZOVANJEM METODA
		- SINHRONIZOVANJEM BLOKOVA
	
SINHRONIZOVANA METODA
	- POTREBNO JE STAVITI KLJUCNU RIJEC: SYNCHRONIZED
		- SAMO JEDNA NIT ONDA MOZE PRISTUPITI
	- E SADA DA BI SE IZVRSILA OVA METODA NEKOG OBJEKTA, NIT MORA DA BUDE U POSJEDU MONITORA TOG OBJEKTA
	- MONITOR SE OSLOBADJA KAD SE IZADJE IZ METODE
	- STEK I BUFFER OPERACIJE IMPLEMENTIRATI KAO SINHRONIZOVANE

SINHRONIZOVANI BLOK
	- POTREBNO JE KORISTITI NAREDBU SYNCHRONIZED
	- OVA NAREDBA MORA SPECIFIKOVATI OBJEKAT KOJI ZAKLJUCAVA

	//OVO JE U NEKOJ METODI KLASE
	SYNCHRONIZED(THIS){
		AUTO = "sOMEMODEL";
		VALUE = 12000;
	}

REENTRANT SINHRONIZACIJA
	- NIT MOZE DA POSJEDUJE ISTI MONITOR VISE PUTA
	- TO SE DESAVA KADA SINHRONIZOVAN KOD POZIVA NEKU SINHRONIZOVANU METODU



